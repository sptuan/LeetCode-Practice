class Solution {
public:
    int minDistance(string word1, string word2) {
        
        this->i_size = word1.size();
        this->j_size = word2.size();
        vector<int> dp_temp(i_size+1,-1);
        vector<vector<int>> dp(j_size+1,dp_temp);
        
        for(int i=0; i<i_size+1; i++){
            dp[0][i] = i;
        }
        for(int i=0; i<j_size+1; i++){
            dp[i][0] = i;
        }

        for(int i=1; i<i_size+1; i++){
            for(int j=1; j<j_size+1; j++){
                if(word1[i-1] == word2[j-1]){
                    dp[j][i] = dp[j-1][i-1];
                }
                else{
                    dp[j][i] = min(min(dp[j-1][i-1],dp[j][i-1]), dp[j-1][i])+1;
                }
            }
        }

        return dp[j_size][i_size];
        //return memo[(i_size)*(j_size)-1];
    }
private:
    //unordered_map<int,bool> hash_t;
    int i_size;
    int j_size;
};
